<#
this.HandleField += (templateType, field) => { 
	if (field.IsCollection) { #>

///// <summary>Replaces the elements of the <#= field.NamePascalCase #> collection with the specified collection.</summary>
//public <#= templateType.TypeName #> With<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
//	return this.With(<#= field.NameCamelCase #>: CollectionExtensions.ResetContents(this.<#=field.NamePascalCase#>, values));
//}
//
///// <summary>Replaces the elements of the <#= field.NamePascalCase #> collection with the specified collection.</summary>
//public <#= templateType.TypeName #> With<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
//	return this.With(<#= field.NameCamelCase #>: CollectionExtensions.ResetContents(this.<#=field.NamePascalCase#>, values));
//}
//
///// <summary>Adds the specified elements from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Add<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
//	return this.With(<#= field.NameCamelCase #>: CollectionExtensions.AddRange(this.<#=field.NamePascalCase#>, values));
//}
//
///// <summary>Adds the specified elements from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Add<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
//	return this.With(<#= field.NameCamelCase #>: CollectionExtensions.AddRange(this.<#=field.NamePascalCase#>, values));
//}
//
///// <summary>Adds the specified element from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Add<#= field.NamePascalCase #>(<#= field.ElementTypeName #> value) {
//	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.Add(value));
//}
//
///// <summary>Removes the specified elements from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
//	return this.With(<#= field.NameCamelCase #>: CollectionExtensions.RemoveRange(this.<#=field.NamePascalCase#>, values));
//}
//
///// <summary>Removes the specified elements from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
//	return this.With(<#= field.NameCamelCase #>: CollectionExtensions.RemoveRange(this.<#=field.NamePascalCase#>, values));
//}
//
///// <summary>Removes the specified element from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(<#= field.ElementTypeName #> value) {
//	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.Remove(value));
//}
//
///// <summary>Clears all elements from the <#= field.NamePascalCase #> collection.</summary>
//public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>() {
//	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.Clear());
//}

<#
	} // if field type is a collection
}; // event handler
#>